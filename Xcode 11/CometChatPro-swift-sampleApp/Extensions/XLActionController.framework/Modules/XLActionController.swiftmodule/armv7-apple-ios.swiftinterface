// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name XLActionController
import Foundation
import Swift
import UIKit
@_exported import XLActionController
public enum ActionStyle {
  case `default`
  case cancel
  case destructive
  public static func == (a: XLActionController.ActionStyle, b: XLActionController.ActionStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Action<T> {
  public var enabled: Swift.Bool
  public var executeImmediatelyOnTouch: Swift.Bool
  public var data: T? {
    get
    }
  public var style: XLActionController.ActionStyle {
    get
    }
  public var handler: ((XLActionController.Action<T>) -> Swift.Void)? {
    get
    }
  public init(_ data: T?, style: XLActionController.ActionStyle, executeImmediatelyOnTouch: Swift.Bool = false, handler: ((XLActionController.Action<T>) -> Swift.Void)?)
}
@objc open class DynamicCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  open var dynamicAnimator: UIKit.UIDynamicAnimator?
  open var itemsAligment: UIKit.UIControl.ContentHorizontalAlignment
  open var collisionBehavior: UIKit.UICollisionBehavior? {
    get
    set(value)
  }
  open var dynamicItemBehavior: UIKit.UIDynamicItemBehavior? {
    get
    set(value)
  }
  open var gravityBehavior: UIKit.UIGravityBehavior? {
    get
    set(value)
  }
  open var useDynamicAnimator: Swift.Bool {
    get
    set(newValue)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func prepare(forCollectionViewUpdates updateItems: [UIKit.UICollectionViewUpdateItem])
  @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc deinit
}
public protocol SeparatorCellType : ObjectiveC.NSObjectProtocol {
  func showSeparator()
  func hideSeparator()
}
@objc open class ActionCell : UIKit.UICollectionViewCell, XLActionController.SeparatorCellType {
  @objc @IBOutlet weak open var actionTitleLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var actionImageView: UIKit.UIImageView?
  @objc @IBOutlet weak open var actionDetailLabel: UIKit.UILabel?
  @objc @IBOutlet weak open var separatorView: UIKit.UIView?
  @objc @IBOutlet weak open var imageViewWidthConstraint: UIKit.NSLayoutConstraint?
  @objc override dynamic open func awakeFromNib()
  open func setup(_ title: Swift.String?, detail: Swift.String?, image: UIKit.UIImage?)
  open func showSeparator()
  open func hideSeparator()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct ActionControllerSettings {
  public struct Behavior {
    public var hideOnTap: Swift.Bool
    public var hideOnScrollDown: Swift.Bool
    public var scrollEnabled: Swift.Bool
    public var bounces: Swift.Bool
    public var useDynamics: Swift.Bool
    public var hideNavigationBarOnShow: Swift.Bool
  }
  public struct CancelViewStyle {
    public var showCancel: Swift.Bool
    public var title: Swift.String?
    public var height: CoreGraphics.CGFloat
    public var backgroundColor: UIKit.UIColor
    public var hideCollectionViewBehindCancelView: Swift.Bool
  }
  public struct CollectionViewStyle {
    public var lateralMargin: CoreGraphics.CGFloat
    public var cellHeightWhenDynamicsIsUsed: CoreGraphics.CGFloat
  }
  public struct PresentAnimationStyle {
    public var damping: CoreGraphics.CGFloat
    public var delay: Foundation.TimeInterval
    public var duration: Foundation.TimeInterval
    public var springVelocity: CoreGraphics.CGFloat
    public var options: UIKit.UIView.AnimationOptions
  }
  public struct DismissAnimationStyle {
    public var damping: CoreGraphics.CGFloat
    public var delay: Foundation.TimeInterval
    public var duration: Foundation.TimeInterval
    public var springVelocity: CoreGraphics.CGFloat
    public var options: UIKit.UIView.AnimationOptions
    public var offset: CoreGraphics.CGFloat
  }
  public struct AnimationStyle {
    public var scale: CoreGraphics.CGSize?
    public var present: XLActionController.ActionControllerSettings.PresentAnimationStyle
    public var dismiss: XLActionController.ActionControllerSettings.DismissAnimationStyle
  }
  public struct StatusBarStyle {
    public var showStatusBar: Swift.Bool
    public var style: UIKit.UIStatusBarStyle
    public var modalPresentationCapturesStatusBarAppearance: Swift.Bool
  }
  public var behavior: XLActionController.ActionControllerSettings.Behavior
  public var cancelView: XLActionController.ActionControllerSettings.CancelViewStyle
  public var collectionView: XLActionController.ActionControllerSettings.CollectionViewStyle
  public var animation: XLActionController.ActionControllerSettings.AnimationStyle
  public var statusBar: XLActionController.ActionControllerSettings.StatusBarStyle
  public static func defaultSettings() -> XLActionController.ActionControllerSettings
}
open class Section<ActionDataType, SectionHeaderDataType> {
  open var data: SectionHeaderDataType? {
    get
    set(newValue)
  }
  open var actions: [XLActionController.Action<ActionDataType>]
  public init()
  @objc deinit
}
public enum CellSpec<CellType, CellDataType> where CellType : UIKit.UICollectionViewCell {
  case nibFile(nibName: Swift.String, bundle: Foundation.Bundle?, height: ((CellDataType) -> CoreGraphics.CGFloat))
  case cellClass(height: ((CellDataType) -> CoreGraphics.CGFloat))
  public var height: ((CellDataType) -> CoreGraphics.CGFloat) {
    get
  }
}
public enum HeaderSpec<HeaderType, HeaderDataType> where HeaderType : UIKit.UICollectionReusableView {
  case nibFile(nibName: Swift.String, bundle: Foundation.Bundle?, height: ((HeaderDataType) -> CoreGraphics.CGFloat))
  case cellClass(height: ((HeaderDataType) -> CoreGraphics.CGFloat))
  public var height: ((HeaderDataType) -> CoreGraphics.CGFloat) {
    get
  }
}
open class ActionController<ActionViewType, ActionDataType, HeaderViewType, HeaderDataType, SectionHeaderViewType, SectionHeaderDataType> : UIKit.UIViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UIViewControllerTransitioningDelegate, UIKit.UIViewControllerAnimatedTransitioning where ActionViewType : UIKit.UICollectionViewCell, HeaderViewType : UIKit.UICollectionReusableView, SectionHeaderViewType : UIKit.UICollectionReusableView {
  open var headerData: HeaderDataType? {
    get
    set(newValue)
  }
  open var settings: XLActionController.ActionControllerSettings
  open var cellSpec: XLActionController.CellSpec<ActionViewType, ActionDataType>
  open var sectionHeaderSpec: XLActionController.HeaderSpec<SectionHeaderViewType, SectionHeaderDataType>?
  open var headerSpec: XLActionController.HeaderSpec<HeaderViewType, HeaderDataType>?
  open var onConfigureHeader: ((HeaderViewType, HeaderDataType) -> ())?
  open var onConfigureSectionHeader: ((SectionHeaderViewType, SectionHeaderDataType) -> ())?
  open var onConfigureCellForAction: ((ActionViewType, XLActionController.Action<ActionDataType>, Foundation.IndexPath) -> ())?
  open var contentHeight: CoreGraphics.CGFloat
  open var safeAreaInsets: UIKit.UIEdgeInsets {
    get
  }
  open var cancelView: UIKit.UIView?
  open var backgroundView: UIKit.UIView {
    get
    set(value)
  }
  open var collectionView: UIKit.UICollectionView {
    get
    set(value)
  }
  open var collectionViewLayout: XLActionController.DynamicCollectionViewFlowLayout {
    get
    set(value)
  }
  open var presentingNavigationController: UIKit.UINavigationController? {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func addAction(_ action: XLActionController.Action<ActionDataType>)
  @discardableResult
  open func addSection(_ section: XLActionController.Section<ActionDataType, SectionHeaderDataType>) -> XLActionController.Section<ActionDataType, SectionHeaderDataType>
  open func sectionForIndex(_ index: Swift.Int) -> XLActionController.Section<ActionDataType, SectionHeaderDataType>?
  open func actionForIndexPath(_ indexPath: Foundation.IndexPath) -> XLActionController.Action<ActionDataType>?
  open func actionIndexPathFor(_ indexPath: Foundation.IndexPath) -> Foundation.IndexPath
  open func dismiss(_ completion: (() -> ())? = nil)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @available(iOS 11.0, *)
  @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  open func createCancelView() -> UIKit.UIView
  open func updateCancelViewLayout()
  @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, shouldHighlightItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didUnhighlightItemAt indexPath: Foundation.IndexPath)
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  open func presentView(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView, animationDuration: Swift.Double, completion: ((Swift.Bool) -> Swift.Void)?)
  open func dismissView(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView, animationDuration: Swift.Double, completion: ((Swift.Bool) -> Swift.Void)?)
  open func onWillPresentView()
  open func performCustomPresentationAnimation(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView)
  open func onDidPresentView()
  open func onWillDismissView()
  open func performCustomDismissingAnimation(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView)
  open func onDidDismissView()
  @objc deinit
}
open class DynamicsActionController<ActionViewType, ActionDataType, HeaderViewType, HeaderDataType, SectionHeaderViewType, SectionHeaderDataType> : XLActionController.ActionController<ActionViewType, ActionDataType, HeaderViewType, HeaderDataType, SectionHeaderViewType, SectionHeaderDataType> where ActionViewType : UIKit.UICollectionViewCell, HeaderViewType : UIKit.UICollectionReusableView, SectionHeaderViewType : UIKit.UICollectionReusableView {
  open var animator: UIKit.UIDynamicAnimator {
    get
    set(value)
  }
  open var gravityBehavior: UIKit.UIGravityBehavior {
    get
    set(value)
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  override open func dismiss(_ completion: (() -> ())?)
  override open func dismissView(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView, animationDuration: Swift.Double, completion: ((Swift.Bool) -> Swift.Void)?)
  override open func onWillPresentView()
  override open func performCustomDismissingAnimation(_ presentedView: UIKit.UIView, presentingView: UIKit.UIView)
  @objc deinit
}
